@startuml

!define CoreBG #d1e7dd
!define CoreBorder #0f5132
!define DataBG #cff4fc
!define DataBorder #055160
!define DomainBG #f8d7da
!define DomainBorder #842029
!define PresentationBG #e7d8f0
!define PresentationBorder #6b3fa0
!define ApplicationBG #fff3cd
!define ApplicationBorder #664d03
!define FeatureBG #d0ebff
!define FeatureBorder #084298
!define DIBG #58edda
!define DIBorder #007f73

!define ArrowCore #0f5132
!define ArrowData #055160
!define ArrowDomain #842029
!define ArrowPresentation #6b3fa0
!define ArrowDI #007f73

skinparam linetype ortho
left to right direction

skinparam package {
    BackgroundColor<<Core>> CoreBG
    BorderColor<<Core>> CoreBorder
    BackgroundColor<<Data>> DataBG
    BorderColor<<Data>> DataBorder
    BackgroundColor<<Domain>> DomainBG
    BorderColor<<Domain>> DomainBorder
    BackgroundColor<<Presentation>> PresentationBG
    BorderColor<<Presentation>> PresentationBorder
    BackgroundColor<<Application>> ApplicationBG
    BorderColor<<Application>> ApplicationBorder
    BackgroundColor<<Feature>> FeatureBG
    BorderColor<<Feature>> FeatureBorder
    BackgroundColor<<DI>> DIBG
    BorderColor<<DI>> DIBorder
}

package "Application" <<Application>> {
    class Modules <<internal>>
    class Navigation <<internal>>
}

package "Core" <<Core>> {
    package "Network" <<Core>> {
        interface HttpClient {
            suspend fun <T> get(endpoint: String, headers: Map<String, String>)
            suspend fun <T> post(endpoint: String, body: Any, headers: Map<String, String>)
            suspend fun <T> put(endpoint: String, body: Any, headers: Map<String, String>)
            suspend fun <T> delete(endpoint: String, headers: Map<String, String>)
            suspend fun <T> patch(endpoint: String, body: Any, headers: Map<String, String>)
        }
        class HttpClientImpl <<internal>>
        class AuthRefreshFeature <<internal>>
    }
    package "Datastore" <<Core>> {
        interface LocalStorage {
            fun setString(key: String, value: String)
            fun getString(key: String): String?
            fun setInt(key: String, value: Int)
            fun getInt(key: String): Int?
            fun setBoolean(key: String, value: Boolean)
            fun getBoolean(key: String): Boolean?
            fun setFloat(key: String, value: Float)
            fun getFloat(key: String): Float?
            fun setLong(key: String, value: Long)
            fun getLong(key: String): Long?
            fun setDouble(key: String, value: Double)
            fun getDouble(key: String): Double?
            fun remove(key: String)
        }
        class LocalStorageImpl <<internal>>

        class AuthTokenDataSourceImpl <<internal>>
    }
    package "Database" <<Core>> {
        interface AppDatabase
        class AppDatabaseImpl <<internal>>
    }
    package "DesignSystem" <<Core>> {
        class Components
        class Themes
    }

    Core.Network.HttpClientImpl -[ArrowCore]|> Core.Network.HttpClient
    Core.Datastore.LocalStorageImpl -[ArrowCore]|> Core.Datastore.LocalStorage
    Core.Database.AppDatabaseImpl -[ArrowCore]|> Core.Database.AppDatabase
}

package "FeatureAuth" <<Feature>> {
    package "Presentation" <<Presentation>> {
        class AuthScreens <<internal>>
        class AuthViewModels <<internal>>
        class AuthComponents <<internal>>
        class Navigation
    }

    package "Domain" <<Domain>> {
        class AuthError
        interface AuthTokenDataSource
        interface AuthRepository {
            cleanAuthData()

            setAccessToken(token: String)
            setRefreshToken(token: String)

            getAccessToken(): String?
            getRefreshToken(): String?

            isUserAuthorized(): Boolean
            observeAuthErrors(): Flow<AuthError>
        }
        interface AuthErrorDataSource {
            fun emitError(error: AuthError)
            fun observeError(): Flow<AuthError>
        }
    }

    package "Data" <<Data>> {
        class AuthRepositoryImpl <<internal>>
        class AuthErrorDataSourceImpl <<internal>>
    }

    package DI <<DI>> {
        class AuthModules
    }

    DI -[ArrowDomain]-> Domain
    DI -[ArrowPresentation]-> Presentation
    DI -[ArrowData]-> Data
    Presentation -[ArrowDomain]-> Domain

    Data.AuthRepositoryImpl -[ArrowDomain]|> Domain.AuthRepository
    Data.AuthRepositoryImpl -[ArrowDomain]|> FeatureAuth.Domain.AuthTokenDataSource
    Data.AuthRepositoryImpl -[ArrowDomain]|> FeatureAuth.Domain.AuthErrorDataSource

    Data.AuthErrorDataSourceImpl -[ArrowDomain]|> Domain.AuthErrorDataSource
    Domain.AuthRepository ..> Domain.AuthError
}

Core.Datastore.AuthTokenDataSourceImpl -[ArrowData]|> FeatureAuth.Domain.AuthTokenDataSource
Core.Network.AuthRefreshFeature -[ArrowCore]-> Core.Network.HttpClient
Core.Network.AuthRefreshFeature -[ArrowDomain]-> Core.Network.TokenProvider
Core.Network.AuthRefreshFeature -[ArrowDomain]-> Core.Network.AuthErrorHandler
Core.Network.AuthRefreshFeature -[ArrowDomain]-> Core.Network.RefreshTokenService

Application -[ArrowCore]-> Core.DesignSystem
Application -[ArrowCore]-> Core.Network.HttpClient
Application.Modules -[ArrowDI]-> FeatureAuth.DI.AuthModules
Application.Navigation -[ArrowDI]-> FeatureAuth.Presentation.Navigation

FeatureAuth.Presentation -[ArrowCore]-> Core.DesignSystem.Components
FeatureAuth.Data -[ArrowCore]-> Core.Datastore.LocalStorage
FeatureAuth.Data -[ArrowCore]-> Core.Database.AppDatabase
FeatureAuth.Data -[ArrowCore]-> Core.Network.HttpClient

FeatureAuth.Data -[ArrowDomain]-> FeatureAuth.Domain.AuthTokenDataSource
FeatureAuth.Data -[ArrowDomain]-> FeatureAuth.Domain.AuthErrorDataSource

@enduml
