@startuml

!define CoreBG #d1e7dd
!define CoreBorder #0f5132
!define DataBG #cff4fc
!define DataBorder #055160
!define DomainBG #f8d7da
!define DomainBorder #842029
!define PresentationBG #e7d8f0
!define PresentationBorder #6b3fa0
!define ApplicationBG #fff3cd
!define ApplicationBorder #664d03
!define FeatureBG #d0ebff
!define FeatureBorder #084298
!define DIBG #58edda
!define DIBorder #007f73
!define ArrowCore #0f5132
!define ArrowData #055160
!define ArrowDomain #842029
!define ArrowPresentation #6b3fa0
!define ArrowDI #007f73

skinparam linetype ortho
left to right direction

skinparam package {
    BackgroundColor<<core>> CoreBG
    BorderColor<<core>> CoreBorder
    BackgroundColor<<data>> DataBG
    BorderColor<<data>> DataBorder
    BackgroundColor<<domain>> DomainBG
    BorderColor<<domain>> DomainBorder
    BackgroundColor<<presentation>> PresentationBG
    BorderColor<<presentation>> PresentationBorder
    BackgroundColor<<application>> ApplicationBG
    BorderColor<<application>> ApplicationBorder
    BackgroundColor<<features>> FeatureBG
    BorderColor<<features>> FeatureBorder
    BackgroundColor<<di>> DIBG
    BorderColor<<di>> DIBorder
}

package "application" <<application>> {
    class Application <<internal>>

    package "navigation" <<internal>> {
        class AppNavigation
    }

    package "di" <<di>> {
        class AppModules <<internal>>
    }
}

package "core" <<core>> {
    package "network" <<core>> {
        interface HttpClient {
            suspend fun <T> get(endpoint: String, headers: Map<String, String>)
            suspend fun <T> post(endpoint: String, body: Any, headers: Map<String, String>)
            suspend fun <T> put(endpoint: String, body: Any, headers: Map<String, String>)
            suspend fun <T> delete(endpoint: String, headers: Map<String, String>)
            suspend fun <T> patch(endpoint: String, body: Any, headers: Map<String, String>)
        }
        class HttpClientImpl <<internal>>
        class AuthRefreshFeature <<internal>>
        class DiModule
    }
    package "datastore" <<core>> {
        interface LocalStorage {
            fun setString(key: String, value: String)
            fun getString(key: String): String?
            fun setInt(key: String, value: Int)
            fun getInt(key: String): Int?
            fun setBoolean(key: String, value: Boolean)
            fun getBoolean(key: String): Boolean?
            fun setFloat(key: String, value: Float)
            fun getFloat(key: String): Float?
            fun setLong(key: String, value: Long)
            fun getLong(key: String): Long?
            fun setDouble(key: String, value: Double)
            fun getDouble(key: String): Double?
            fun remove(key: String)
        }
        class LocalStorageImpl <<internal>>
        class DiModule
    }
    package "database" <<core>> {
        interface AppDatabase
        class AppDatabaseImpl <<internal>>
        class DiModule
    }
    package "designsystem" <<core>> {
        package "components" <<internal>> {
        }
        package "themes" <<internal>> {
        }
    }

    core.network.HttpClientImpl .[ArrowCore].|> core.network.HttpClient
    core.datastore.LocalStorageImpl .[ArrowCore].|> core.datastore.LocalStorage
    core.database.AppDatabaseImpl .[ArrowCore].|> core.database.AppDatabase

    core.network.DiModule .[ArrowDI].> core.network.HttpClient
    core.datastore.DiModule .[ArrowDI].> core.datastore.LocalStorage
    core.database.DiModule .[ArrowDI].> core.database.AppDatabase
}

package "features" <<features>> {
    package "auth" {
        package "presentation" <<presentation>> {
            class AuthScreens <<internal>>
            class AuthViewModels <<internal>>
            class Components <<internal>>
            class Navigation
        }

        package "domain" <<domain>> {
            package "usecases" <<internal>> {
                class CleanLocalUserDataUseCase
                class RefreshAccessTokenUseCase
            }

            package "models" <<internal>> {
                class AuthError {
                    + type: AuthErrorType
                    + message: String
                }
                enum AuthErrorType {
                    RefreshTokenIsNotSpecified
                    InvalidRefreshToken
                    InvalidAccessToken
                    OAuthServiceUnavailable
                    UnknownAuthError
                }
                class AuthDataModel {
                    + accessToken: String
                    + refreshToken: String
                }
            }

            package "repositories" <<internal>> {
                interface AuthRepository {
                    fun cleanAuthData()
                    fun setAccessToken(token: String)
                    fun setRefreshToken(token: String)
                    fun getAccessToken(): String?
                    fun getRefreshToken(): String?
                    fun isUserAuthorized(): Boolean
                    suspend fun observeAuthErrors(): Flow<AuthError>
                }
            }

            package "datasource" <<domain>> {
                interface AuthTokenDataSource {
                    fun isUserAuthorized(): Boolean
                    fun getAccessToken(): String?
                    fun getRefreshToken(): String?
                    fun setAccessToken(token: String)
                    fun setRefreshToken(token: String)
                }

                interface AuthErrorDataSource {
                    fun emitError(error: AuthError)
                    fun observeError(): Flow<AuthError>
                }
            }
        }

        package "data" <<data>> <<internal>> {
            package "repositories"  {
                class AuthRepositoryImpl {
                    - authTokenDataSource: AuthTokenDataSource
                    - authErrorDataSource: AuthErrorDataSource
                    - remoteDataSource: HttpClient
                }
            }

            package "datasource" {
                class AuthErrorDataSourceImpl
                class AuthTokenDataSourceImpl
                class NetworkRefreshTokenDataSource <<internal>>
            }

            package "refresh" {
                class AuthRefreshFeatureImpl {
                    - cleanLocalUserDataUseCase: CleanLocalUserDataUseCase
                    - authTokenDataSource: AuthTokenDataSource
                    - authErrorDataSource: AuthErrorDataSource
                    - refreshTokenDataSource: NetworkRefreshTokenDataSource
                    - json: Json
                }
            }
        }

        package "di" <<di>> {
            class AuthModules
        }

        di .[ArrowDomain].> domain
        di .[ArrowPresentation].> presentation
        di .[ArrowData].> data
        presentation .[ArrowDomain].> domain

        data.repositories.AuthRepositoryImpl .[ArrowDomain].|> domain.repositories.AuthRepository
        data.repositories.AuthRepositoryImpl o-[ArrowDomain]- domain.datasource.AuthTokenDataSource
        data.repositories.AuthRepositoryImpl o-[ArrowDomain]- domain.datasource.AuthErrorDataSource

        data.datasource.AuthErrorDataSourceImpl .[ArrowDomain].|> domain.datasource.AuthErrorDataSource
        data.datasource.AuthTokenDataSourceImpl .[ArrowDomain].|> domain.datasource.AuthTokenDataSource
        data.datasource.AuthTokenDataSourceImpl .[ArrowDomain].> domain.models.AuthDataModel

        domain.models.AuthError .[ArrowDomain].> domain.models.AuthErrorType
        domain.datasource.AuthErrorDataSource .[ArrowDomain].> domain.models.AuthError
        domain.repositories.AuthRepository .[ArrowDomain].> domain.models.AuthError

        domain.usecases.CleanLocalUserDataUseCase .[ArrowDomain].> domain.repositories.AuthRepository
        domain.usecases.RefreshAccessTokenUseCase .[ArrowDomain].> domain.repositories.AuthRepository

        data.refresh.AuthRefreshFeatureImpl o-[ArrowDomain]- domain.usecases.CleanLocalUserDataUseCase
        data.refresh.AuthRefreshFeatureImpl o-[ArrowDomain]- domain.datasource.AuthTokenDataSource
        data.refresh.AuthRefreshFeatureImpl o-[ArrowDomain]- domain.datasource.AuthErrorDataSource
        data.refresh.AuthRefreshFeatureImpl o-[ArrowData]- data.datasource.NetworkRefreshTokenDataSource
        data.refresh.AuthRefreshFeatureImpl .[ArrowCore].|> core.network.AuthRefreshFeature

        presentation .[ArrowCore].> core.designsystem
    }
}

application.Application .[ArrowCore].> core.designsystem

application.navigation.AppNavigation .[ArrowPresentation].> features.auth.presentation.Navigation

application.di.AppModules .[ArrowDI].> features.auth.di.AuthModules
application.di.AppModules .[ArrowDI].> core.network.DiModule
application.di.AppModules .[ArrowDI].> core.datastore.DiModule
application.di.AppModules .[ArrowDI].> core.database.DiModule

features.auth.presentation .[ArrowCore].> core.designsystem

@enduml
