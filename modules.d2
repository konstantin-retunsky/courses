# Стили
vars: {
  colors: {
    defaultFill: "#f9f9f9"
    defaultStroke: "#333"

    coreFill: "#d1e7dd"
    coreStroke: "#0f5132"

    dataFill: "#cff4fc"
    dataStroke: "#055160"

    domainFill: "#f8d7da"
    domainStroke: "#842029"

    presentationFill: "#e7d8f0"
    presentationStroke: "#6b3fa0"

    applicationFill: "#fff3cd"
    applicationStroke: "#664d03"

    featureFill: "#d0ebff"
    featureStroke: "#084298"

    diFill: "#58edda"
    diStroke: "#007f73"

    defaultArrow: "#555"
  }
  stroke: {
    width: 2
  }
  radius: {
    medium: 6
  }
}

***.shape: rectangle
***.style: {
  "stroke-width": ${stroke.width}
  "border-radius": ${radius.medium}
}

classes: {
  DomainDependencyArrow: {
    style: {
      stroke: ${colors.domainStroke}
    }
  }

  DataDependencyArrow: {
    style: {
      stroke: ${colors.dataStroke}
    }
  }

  DependencyInjectionArrow: {
    style: {
      stroke: ${colors.diStroke}
    }
  }

  PresentationDependencyArrow: {
    style: {
      stroke: ${colors.presentationStroke}
    }
  }

  CoreDependencyArrow: {
    style: {
      stroke: ${colors.coreStroke}
    }
  }

  DependencyInjectionStyle: {
    style: {
      fill: ${colors.diFill}
      stroke: ${colors.diStroke}
    }
  }

  DomainStyle: {
    style: {
      fill: ${colors.domainFill}
      stroke: ${colors.domainStroke}
    }
  }

  DataStyle: {
    style: {
      fill: ${colors.dataFill}
      stroke: ${colors.dataStroke}
    }
  }

  PresentationStyle: {
    style: {
      fill: ${colors.presentationFill}
      stroke: ${colors.presentationStroke}
    }
  }

  CoreStyle: {
    style: {
      fill: ${colors.coreFill}
      stroke: ${colors.coreStroke}
    }
  }

  ApplicationStyle: {
    style: {
      fill: ${colors.applicationFill}
      stroke: ${colors.applicationStroke}
    }
  }

  FeatureStyle: {
    style: {
      fill: ${colors.featureFill}
      stroke: ${colors.featureStroke}
    }
  }
}

# Слои
core: {
  class: CoreStyle

  network: {
    di.class: DependencyInjectionStyle
  }
  datastore: {
    di.class: DependencyInjectionStyle
  }
  database: {
    di.class: DependencyInjectionStyle
  }
  designsystem
}

application: {
  class: ApplicationStyle

  modules
}

feature: {
  class: FeatureStyle

  auth: {
    presentation: {
      class: PresentationStyle

      screens
      viewmodels
      components
    }
    domain: {
      class: DomainStyle

      model
      usecase
      repository
    }
    data: {
      class: DataStyle

      repository-impl
      datasource
    }

    # зависимости внутри модуля
    di: {
      class: DependencyInjectionStyle
    }
    di -> domain: {
      class: DomainDependencyArrow
    }
    di -> presentation: {
      class: PresentationDependencyArrow
    }
    di -> data: {
      class: DataDependencyArrow
    }
    presentation -> domain: {
      class: DomainDependencyArrow
    }
    data -> domain: {
      class: DomainDependencyArrow
    }
  }
  onboarding: {
    presentation.class: PresentationStyle
    domain.class: DomainStyle
    data.class: DataStyle
  }
  # main: {
  #   presentation.class: PresentationStyle
  #   domain.class: DomainStyle
  #   data.class: DataStyle
  # }
  # courses: {
  #   presentation.class: PresentationStyle
  #   domain.class: DomainStyle
  #   data.class: DataStyle
  # }
  # detail-course: {
  #   presentation.class: PresentationStyle
  #   domain.class: DomainStyle
  #   data.class: DataStyle
  # }
  # favorites: {
  #   presentation.class: PresentationStyle
  #   domain.class: DomainStyle
  #   data.class: DataStyle
  # }
  # profile: {
  #   presentation.class: PresentationStyle
  #   domain.class: DomainStyle
  #   data.class: DataStyle
  # }
  # notifications: {
  #   presentation.class: PresentationStyle
  #   domain.class: DomainStyle
  #   data.class: DataStyle
  # }
}

# зависимости feature-модуля
# auth
feature.auth.presentation -> core.designsystem: {
  class: CoreDependencyArrow
}
feature.auth.data -> core.datastore: {
  class: CoreDependencyArrow
}
feature.auth.data -> core.database: {
  class: CoreDependencyArrow
}
feature.auth.data -> core.network: {
  class: CoreDependencyArrow
}
#

# зависимости application-модуля
application -> core.designsystem: {
  class: CoreDependencyArrow
}
application.modules -> feature.auth.di: {
  class: DependencyInjectionArrow
}
application.modules -> core.network.di: {
  class: CoreDependencyArrow
}
application.modules -> core.datastore.di: {
  class: CoreDependencyArrow
}
application.modules -> core.database.di: {
  class: CoreDependencyArrow
}
